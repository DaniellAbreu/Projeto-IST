<!DOCTYPE html>
<html lang="pt-BR">

<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Editor de Acessibilidade</title>
    <script src="https://cdnjs.cloudflare.com/ajax/libs/pdf.js/2.16.105/pdf.min.js"></script>
    <script src="https://cdnjs.cloudflare.com/ajax/libs/mammoth/1.4.2/mammoth.browser.min.js"></script>
    <style>
        body {
            font-family: Arial, sans-serif;
            margin: 0;
            padding: 0;
            background: #f0f0f0;
        }

        header {
            background: #0073e6;
            color: white;
            padding: 10px;
            text-align: center;
            position: sticky;
            top: 0;
            z-index: 10;
        }

        #upload-container {
            text-align: center;
            margin: 20px;
        }

        #upload-container input {
            font-size: 16px;
            padding: 5px;
        }

        #controls {
            display: flex;
            flex-wrap: wrap;
            justify-content: space-around;
            padding: 10px;
            background: #f9f9f9;
            border-top: 1px solid #ccc;
            position: sticky;
            top: 50px;
            z-index: 9;
        }

        #editor {
            margin: 20px;
            padding: 20px;
            background: white;
            border: 1px solid #ccc;
            min-height: 300px;
            overflow: auto;
            font-size: 16px;
        }

        .control-group {
            margin: 5px;
        }
    </style>
</head>

<body>
    <header>
        <h1>Editor de Acessibilidade</h1>
    </header>

    <div id="upload-container">
        <label for="file-upload">Faça o upload do arquivo:</label>
        <input type="file" id="file-upload" accept=".pdf,.docx,.txt">
    </div>

    <div id="controls">
        <div class="control-group">
            <label for="font-family">Fonte:</label>
            <select id="font-family">
                <option value="Arial">Arial</option>
                <option value="Verdana">Verdana</option>
                <option value="Georgia">Georgia</option>
                <option value="Times New Roman">Times New Roman</option>
            </select>
        </div>

        <div class="control-group">
            <label for="font-size">Tamanho da Fonte:</label>
            <button id="decrease-font">-</button>
            <input type="number" id="font-size" value="16" min="10" max="100" style="width: 50px;" disabled>
            <button id="increase-font">+</button>
        </div>

        <div class="control-group">
            <label for="color">Cor do Texto:</label>
            <input type="color" id="color" value="#000000">
        </div>

        <div class="control-group">
            <label for="background">Cor do Fundo:</label>
            <input type="color" id="background" value="#ffffff">
        </div>

        <div class="control-group">
            <button id="align-left">Alinhar à Esquerda</button>
            <button id="align-center">Centralizar</button>
            <button id="align-right">Alinhar à Direita</button>
            <button id="align-justify">Justificar</button>
        </div>
    </div>

    <div id="editor" contenteditable="true">Carregue um arquivo para começar a editar...</div>

    <script>
        const fileUpload = document.getElementById('file-upload');
        const editor = document.getElementById('editor');
        const fontFamily = document.getElementById('font-family');
        const fontSize = document.getElementById('font-size');
        const colorPicker = document.getElementById('color');
        const backgroundPicker = document.getElementById('background');
        const increaseFont = document.getElementById('increase-font');
        const decreaseFont = document.getElementById('decrease-font');
        const alignLeft = document.getElementById('align-left');
        const alignCenter = document.getElementById('align-center');
        const alignRight = document.getElementById('align-right');
        const alignJustify = document.getElementById('align-justify');

        // Atualizar estilo do editor
        fontFamily.addEventListener('change', () => {
            editor.style.fontFamily = fontFamily.value;
        });

        colorPicker.addEventListener('input', () => {
            editor.style.color = colorPicker.value;
        });

        backgroundPicker.addEventListener('input', () => {
            editor.style.backgroundColor = backgroundPicker.value;
        });

        increaseFont.addEventListener('click', () => {
            const currentSize = parseInt(fontSize.value, 10);
            if (currentSize < 100) {
                fontSize.value = currentSize + 2;
                editor.style.fontSize = fontSize.value + 'px';
            }
        });

        decreaseFont.addEventListener('click', () => {
            const currentSize = parseInt(fontSize.value, 10);
            if (currentSize > 10) {
                fontSize.value = currentSize - 2;
                editor.style.fontSize = fontSize.value + 'px';
            }
        });

        // Alinhamento do texto
        alignLeft.addEventListener('click', () => {
            editor.style.textAlign = 'left';
        });

        alignCenter.addEventListener('click', () => {
            editor.style.textAlign = 'center';
        });

        alignRight.addEventListener('click', () => {
            editor.style.textAlign = 'right';
        });

        alignJustify.addEventListener('click', () => {
            editor.style.textAlign = 'justify';
        });

        // Upload do arquivo
        fileUpload.addEventListener('change', (event) => {
            const file = event.target.files[0];
            if (file) {
                const reader = new FileReader();
                if (file.type === 'application/pdf') {
                    reader.onload = function () {
                        const typedArray = new Uint8Array(this.result);
                        pdfjsLib.getDocument(typedArray).promise.then(pdf => {
                            editor.innerHTML = ''; // Limpar editor
                            pdf.getPage(1).then(page => {
                                page.getTextContent().then(textContent => {
                                    textContent.items.forEach(item => {
                                        const div = document.createElement('div');
                                        div.innerText = item.str;
                                        editor.appendChild(div);
                                    });
                                });
                            });
                        });
                    };
                    reader.readAsArrayBuffer(file);
                } else if (file.type === 'application/vnd.openxmlformats-officedocument.wordprocessingml.document') {
                    reader.onload = function () {
                        mammoth.extractRawText({ arrayBuffer: this.result }).then(result => {
                            editor.innerHTML = result.value;
                        });
                    };
                    reader.readAsArrayBuffer(file);
                } else if (file.type === 'text/plain') {
                    reader.onload = function () {
                        editor.innerText = this.result;
                    };
                    reader.readAsText(file);
                } else {
                    alert('Formato não suportado. Use PDF, Word ou TXT.');
                }
            }
        });
    </script>
</body>

</html>
